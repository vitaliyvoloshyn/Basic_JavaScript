/* Задание 2
Не выполняя код, ответить, что выведет браузер и почему:
*/

if (!("a" in window)) {
    var a = 1;
}
alert(a);// undefined

// в глобальной области видимости у нас нет никаких переменных или функций с именем а


var b = function a(x) {
    x && a(--x);
};
alert(a);// undefined

// функция а в данном случае - это функциональное выражение. Она помещена в переменную b.
// и напрямую недоступна


function a(x) {
    return x * 2;
    }
var a;
alert(a); // выведет на экран функцию (не вызов)

// В процессе чтения кода браузер в первую очередь производит поиск объявлений функций. Когда
// обнаруживает, создается функция и переменной, у которой имя будет совпадать с именем функции,
// присваивается ссылка на функцию. 


function b(x, y, a) {
    arguments[2] = 10;
    alert(a); // 10
}
b(1, 2, 3);

// при вызове функции b мы передаем ей три параметра (1, 2, 3). Переменная 
// arguments ссылается на аргументы функции, переданные ей. В данном случае
// мы меняем третий аргумент (а).


function a() {
    alert(this); // вернет обьект window
}
a.call(null);

// встроенный метод call позволяет менять значение this при вызове функции.
// в данном случае значение this мы меняем на null. А null и undefined приводятся
// к глобальному обьекту window. Тот же результат мы получили бы и без метода call